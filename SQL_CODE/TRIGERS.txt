DELIMITER $

CREATE TRIGGER insert_professor_user
BEFORE INSERT ON Professor
FOR EACH ROW
BEGIN
	INSERT INTO Users (usr_username,usr_password,usr_property) VALUES (NEW.prof_email,'password','PROFESSOR');
END$

CREATE TRIGGER insert_student_user
BEFORE INSERT ON Student
FOR EACH ROW
BEGIN
	INSERT INTO Users (usr_username,usr_password,usr_property) VALUES (NEW.std_email,'password','STUDENT');
END$

/* Ίσως χρειαστεί να φτιάξουμε trigger και για το update σε request αλλά λογικά οχι γιατι δεν θα υπάρχει ως επιλογή στη σελίδα. Με τη λογική ότι αν γίνει Αποδοχή/Απόρριψη σε request να μην μπορεί να γίνει ξανά update μέσα από τη βάση */

CREATE TRIGGER insert_request
BEFORE INSERT ON Requests
FOR EACH ROW
BEGIN
    DECLARE thesis_status VARCHAR(25);
    DECLARE supervisor_email VARCHAR(255);

    -- Fetch the status and supervisor of the thesis associated with the new request
    SELECT th_status, th_supervisor INTO thesis_status, supervisor_email
    FROM Thesis 
    WHERE th_id = NEW.req_thesis_id;

    -- Check if the status is not 'Υπό Ανάθεση' or if the supervisor is the same as the requesting professor
    IF thesis_status != 'Υπό Ανάθεση' OR supervisor_email = NEW.req_professor THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Δεν μπορεί να σταλεί αίτηση συμμετοχής σε επιτροπή σε διπλωματική που δεν βρίσκεται Υπό Ανάθεση ή αν ο επιβλέπων είναι ο παραλήπτης της αίτησης!';
    END IF;
END$

/* Insert a response record each time a request is inserted */
CREATE TRIGGER create_responses
AFTER INSERT ON Requests
FOR EACH ROW
BEGIN 
    INSERT INTO Responses (res_req_id) VALUES (NEW.req_id);
END$

/* Trigger that handles the responses on thesis invitations */
CREATE TRIGGER request_response
BEFORE UPDATE ON Responses
FOR EACH ROW
BEGIN
    DECLARE member1 VARCHAR(40);
    DECLARE member2 VARCHAR(40);
    DECLARE professor VARCHAR(40);
    DECLARE thesis_id INT;

    IF NEW.res_response = 'Accepted' THEN
    SELECT req_thesis_id,req_professor INTO thesis_id,professor FROM Requests WHERE req_id=NEW.res_req_id;
    -- Fetch current committee members of the thesis
    SELECT th_committee_member1, th_committee_member2
    INTO member1, member2
    FROM Thesis
    WHERE th_id = thesis_id;

    -- Check if the committee is full
    IF member1 IS NOT NULL AND member2 IS NOT NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'COMMITTEE OF THE SELECTED THESIS HAS NO MORE VACANT POSITIONS.';
    ELSEIF member1 IS NULL THEN
        -- Assign professor to the first available slot
        UPDATE Thesis
        SET th_committee_member1 = professor  
        WHERE th_id = thesis_id;
        
        UPDATE Requests SET req_status='Accepted',req_answer=CURDATE() WHERE req_id=NEW.res_req_id;
        
        IF member2 IS NOT NULL THEN
        UPDATE Thesis SET th_status='Ενεργή',th_assigned_date=CURDATE() WHERE th_id=thesis_id;
        UPDATE Requests SET req_status='Canceled' WHERE req_thesis_id=thesis_id AND req_professor NOT LIKE professor; 
        END IF;
    ELSEIF member2 IS NULL THEN
        -- Assign professor to the second available slot
        UPDATE Thesis
        SET th_committee_member2 = professor
        WHERE th_id = thesis_id;
        
        UPDATE Requests SET req_status='Accepted',req_answer=CURDATE() WHERE req_id=NEW.res_req_id;
        
        IF member1 IS NOT NULL THEN
        UPDATE Thesis SET th_status='Ενεργή',th_assigned_date=CURDATE() WHERE th_id=thesis_id;
        UPDATE Requests SET req_status='Canceled' WHERE req_thesis_id=thesis_id AND req_professor NOT LIKE professor;
        END IF;
    END IF;
    ELSE
    UPDATE Requests SET req_status=NEW.res_response,req_answer=CURDATE() WHERE req_id=NEW.res_req_id;
    END IF;
END$

DELIMITER ;

